package it.agilelab.witboost.provisioning.databricks.controller;

import it.agilelab.witboost.provisioning.databricks.openapi.controller.V1ApiDelegate;
import it.agilelab.witboost.provisioning.databricks.openapi.model.ProvisioningRequest;
import it.agilelab.witboost.provisioning.databricks.openapi.model.ProvisioningStatus;
import it.agilelab.witboost.provisioning.databricks.openapi.model.UpdateAclRequest;
import it.agilelab.witboost.provisioning.databricks.openapi.model.ValidationResult;
import it.agilelab.witboost.provisioning.databricks.service.provision.ProvisionService;
import it.agilelab.witboost.provisioning.databricks.service.updateacl.UpdateAclService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

/**
 * API Controller for the Java Specific Provisioner which implements the autogenerated {@link
 * V1ApiDelegate} interface. The interface defaults the endpoints to throw 501 Not Implemented
 * unless overridden in this class.
 *
 * <p>Exceptions thrown will be handled by {@link SpecificProvisionerExceptionHandler}
 */
@Service
public class SpecificProvisionerController implements V1ApiDelegate {

    private final ProvisionService provisionService;
    private final UpdateAclService updateAclService;

    public SpecificProvisionerController(ProvisionService provisionService, UpdateAclService updateAclService) {
        this.provisionService = provisionService;
        this.updateAclService = updateAclService;
    }

    @Override
    public ResponseEntity<ProvisioningStatus> getStatus(String token) {
        return ResponseEntity.ok(provisionService.getStatus(token));
    }

    @Override
    public ResponseEntity<String> provision(ProvisioningRequest provisioningRequest) {
        return new ResponseEntity<>(provisionService.provision(provisioningRequest), HttpStatus.ACCEPTED);
    }

    @Override
    public ResponseEntity<String> unprovision(ProvisioningRequest provisioningRequest) {
        return new ResponseEntity<>(provisionService.unprovision(provisioningRequest), HttpStatus.ACCEPTED);
    }

    @Override
    public ResponseEntity<ValidationResult> validate(ProvisioningRequest provisioningRequest) {
        return ResponseEntity.ok(provisionService.validate(provisioningRequest));
    }

    @Override
    public ResponseEntity<ProvisioningStatus> updateacl(UpdateAclRequest updateAclRequest) {
        return new ResponseEntity<>(updateAclService.updateAcl(updateAclRequest), HttpStatus.OK);
    }
}
